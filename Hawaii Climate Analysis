{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 272,
   "metadata": {},
   "outputs": [],
   "source": [
    "from matplotlib import style\n",
    "style.use('fivethirtyeight')\n",
    "import matplotlib.pyplot as plt\n",
    "import pymysql\n",
    "from flask import Flask, jsonify\n",
    "import flask\n",
    "\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "import datetime as dt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 273,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Python SQL toolkit and Object Relational Mapper\n",
    "import sqlalchemy\n",
    "from sqlalchemy.ext.automap import automap_base\n",
    "from sqlalchemy.orm import Session\n",
    "from sqlalchemy import create_engine, func"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Climate Analysis and Exploration"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 274,
   "metadata": {},
   "outputs": [],
   "source": [
    "#To begin, use Python and SQLAlchemy to do basic climate analysis and data exploration of your climate database. All of the following analysis should be completed using SQLAlchemy ORM queries, Pandas, and Matplotlib.\n",
    "#* Choose a start date and end date for your trip. Make sure that your vacation range is approximately 3-15 days total."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 275,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['measurement', 'station']"
      ]
     },
     "execution_count": 275,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#* Use SQLAlchemy `create_engine` to connect to your sqlite database.\n",
    "engine = create_engine(\"sqlite:///resources/hawaii.sqlite\")\n",
    "\n",
    "# Create our session (link) from Python to the DB\n",
    "session = Session(engine)\n",
    "\n",
    "#* Use SQLAlchemy `automap_base()` to reflect your tables into classes and save a reference to those classes called `Station` and `Measurement`.\n",
    "# reflect an existing database into a new model\n",
    "Base = automap_base()\n",
    "# reflect the tables\n",
    "Base.prepare(engine, reflect=True)\n",
    "# View all of the classes that automap found\n",
    "Base.classes.keys()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 276,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Save references to each table\n",
    "measurement = Base.classes.measurement\n",
    "station = Base.classes.station"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Precipitation Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 277,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('2017-08-23',)\n"
     ]
    }
   ],
   "source": [
    "#* Design a query to retrieve the last 12 months of precipitation data.\n",
    "latest_date = session.query(measurement.date).order_by(measurement.date.desc()).first()\n",
    "print(latest_date)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 278,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2016-08-23\n"
     ]
    }
   ],
   "source": [
    "year_date = dt.date(2017, 8, 23) - dt.timedelta(days=365)\n",
    "print(year_date)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 279,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('2016-08-24', 0.08),\n",
       " ('2016-08-24', 2.15),\n",
       " ('2016-08-24', 2.28),\n",
       " ('2016-08-24', None),\n",
       " ('2016-08-24', 1.22),\n",
       " ('2016-08-24', 2.15),\n",
       " ('2016-08-24', 1.45),\n",
       " ('2016-08-25', 0.08),\n",
       " ('2016-08-25', 0.08),\n",
       " ('2016-08-25', 0.0),\n",
       " ('2016-08-25', 0.0),\n",
       " ('2016-08-25', 0.21),\n",
       " ('2016-08-25', 0.06),\n",
       " ('2016-08-25', 0.11),\n",
       " ('2016-08-26', 0.0),\n",
       " ('2016-08-26', 0.03),\n",
       " ('2016-08-26', 0.02),\n",
       " ('2016-08-26', 0.04),\n",
       " ('2016-08-26', 0.0),\n",
       " ('2016-08-26', 0.01),\n",
       " ('2016-08-27', 0.0),\n",
       " ('2016-08-27', 0.18),\n",
       " ('2016-08-27', 0.02),\n",
       " ('2016-08-27', 0.0),\n",
       " ('2016-08-27', 0.12),\n",
       " ('2016-08-27', None),\n",
       " ('2016-08-28', 0.01),\n",
       " ('2016-08-28', 0.14),\n",
       " ('2016-08-28', 0.14),\n",
       " ('2016-08-28', 0.14),\n",
       " ('2016-08-28', 0.6),\n",
       " ('2016-08-28', 2.07),\n",
       " ('2016-08-29', 0.0),\n",
       " ('2016-08-29', 0.17),\n",
       " ('2016-08-29', 0.04),\n",
       " ('2016-08-29', None),\n",
       " ('2016-08-29', 0.0),\n",
       " ('2016-08-29', 0.35),\n",
       " ('2016-08-29', 0.9),\n",
       " ('2016-08-30', 0.0),\n",
       " ('2016-08-30', 0.0),\n",
       " ('2016-08-30', 0.02),\n",
       " ('2016-08-30', 0.0),\n",
       " ('2016-08-30', 0.0),\n",
       " ('2016-08-30', 0.05),\n",
       " ('2016-08-31', 0.13),\n",
       " ('2016-08-31', 0.1),\n",
       " ('2016-08-31', None),\n",
       " ('2016-08-31', None),\n",
       " ('2016-08-31', 0.25),\n",
       " ('2016-08-31', 0.24),\n",
       " ('2016-08-31', 2.46),\n",
       " ('2016-09-01', 0.0),\n",
       " ('2016-09-01', 0.0),\n",
       " ('2016-09-01', 0.0),\n",
       " ('2016-09-01', None),\n",
       " ('2016-09-01', 0.02),\n",
       " ('2016-09-01', 0.01),\n",
       " ('2016-09-02', 0.0),\n",
       " ('2016-09-02', 0.02),\n",
       " ('2016-09-02', 0.19),\n",
       " ('2016-09-02', None),\n",
       " ('2016-09-02', None),\n",
       " ('2016-09-02', 0.01),\n",
       " ('2016-09-02', 0.03),\n",
       " ('2016-09-03', 0.0),\n",
       " ('2016-09-03', 0.07),\n",
       " ('2016-09-03', 0.08),\n",
       " ('2016-09-03', 0.12),\n",
       " ('2016-09-03', 1.0),\n",
       " ('2016-09-04', 0.03),\n",
       " ('2016-09-04', 0.03),\n",
       " ('2016-09-04', 0.74),\n",
       " ('2016-09-04', 0.14),\n",
       " ('2016-09-04', 0.44),\n",
       " ('2016-09-05', None),\n",
       " ('2016-09-05', 0.11),\n",
       " ('2016-09-05', None),\n",
       " ('2016-09-05', 0.02),\n",
       " ('2016-09-05', 0.03),\n",
       " ('2016-09-05', 0.18),\n",
       " ('2016-09-06', None),\n",
       " ('2016-09-06', 0.05),\n",
       " ('2016-09-06', 0.04),\n",
       " ('2016-09-06', 0.03),\n",
       " ('2016-09-06', 0.11),\n",
       " ('2016-09-06', 1.0),\n",
       " ('2016-09-07', 0.05),\n",
       " ('2016-09-07', 0.1),\n",
       " ('2016-09-07', 0.23),\n",
       " ('2016-09-07', 0.11),\n",
       " ('2016-09-07', 0.16),\n",
       " ('2016-09-07', 1.35),\n",
       " ('2016-09-08', 0.0),\n",
       " ('2016-09-08', 0.22),\n",
       " ('2016-09-08', 0.01),\n",
       " ('2016-09-08', None),\n",
       " ('2016-09-08', 0.01),\n",
       " ('2016-09-08', 0.07),\n",
       " ('2016-09-08', 0.15),\n",
       " ('2016-09-09', 0.03),\n",
       " ('2016-09-09', 0.01),\n",
       " ('2016-09-09', 0.29),\n",
       " ('2016-09-09', None),\n",
       " ('2016-09-09', 0.23),\n",
       " ('2016-09-09', 0.16),\n",
       " ('2016-09-09', 0.35),\n",
       " ('2016-09-10', 0.0),\n",
       " ('2016-09-10', 0.01),\n",
       " ('2016-09-10', 0.14),\n",
       " ('2016-09-10', 0.09),\n",
       " ('2016-09-10', 1.16),\n",
       " ('2016-09-11', 0.05),\n",
       " ('2016-09-11', 0.18),\n",
       " ('2016-09-11', 0.12),\n",
       " ('2016-09-11', 0.3),\n",
       " ('2016-09-11', 0.6),\n",
       " ('2016-09-12', 0.0),\n",
       " ('2016-09-12', 0.04),\n",
       " ('2016-09-12', None),\n",
       " ('2016-09-12', None),\n",
       " ('2016-09-12', 0.15),\n",
       " ('2016-09-12', 0.31),\n",
       " ('2016-09-12', 1.04),\n",
       " ('2016-09-13', 0.02),\n",
       " ('2016-09-13', 0.37),\n",
       " ('2016-09-13', 0.32),\n",
       " ('2016-09-13', None),\n",
       " ('2016-09-13', 0.46),\n",
       " ('2016-09-13', 0.34),\n",
       " ('2016-09-13', 1.2),\n",
       " ('2016-09-14', 1.32),\n",
       " ('2016-09-14', 0.9),\n",
       " ('2016-09-14', 1.84),\n",
       " ('2016-09-14', None),\n",
       " ('2016-09-14', 1.19),\n",
       " ('2016-09-14', 2.33),\n",
       " ('2016-09-14', 6.7),\n",
       " ('2016-09-15', 0.42),\n",
       " ('2016-09-15', 0.12),\n",
       " ('2016-09-15', 0.07),\n",
       " ('2016-09-15', None),\n",
       " ('2016-09-15', 0.17),\n",
       " ('2016-09-15', 0.83),\n",
       " ('2016-09-15', 3.35),\n",
       " ('2016-09-16', 0.06),\n",
       " ('2016-09-16', 0.01),\n",
       " ('2016-09-16', 0.07),\n",
       " ('2016-09-16', 0.0),\n",
       " ('2016-09-16', 0.01),\n",
       " ('2016-09-16', 0.06),\n",
       " ('2016-09-16', 0.61),\n",
       " ('2016-09-17', 0.05),\n",
       " ('2016-09-17', 0.04),\n",
       " ('2016-09-17', 0.0),\n",
       " ('2016-09-17', 0.36),\n",
       " ('2016-09-17', 0.23),\n",
       " ('2016-09-18', 0.0),\n",
       " ('2016-09-18', 0.0),\n",
       " ('2016-09-18', 0.04),\n",
       " ('2016-09-18', 0.07),\n",
       " ('2016-09-18', 0.42),\n",
       " ('2016-09-19', 0.0),\n",
       " ('2016-09-19', 0.01),\n",
       " ('2016-09-19', None),\n",
       " ('2016-09-19', None),\n",
       " ('2016-09-19', 0.05),\n",
       " ('2016-09-19', 0.01),\n",
       " ('2016-09-19', 0.25),\n",
       " ('2016-09-20', 0.0),\n",
       " ('2016-09-20', 0.09),\n",
       " ('2016-09-20', 0.25),\n",
       " ('2016-09-20', 0.0),\n",
       " ('2016-09-20', 0.04),\n",
       " ('2016-09-20', 0.22),\n",
       " ('2016-09-20', 0.43),\n",
       " ('2016-09-21', 0.0),\n",
       " ('2016-09-21', 0.06),\n",
       " ('2016-09-21', 0.02),\n",
       " ('2016-09-21', 0.0),\n",
       " ('2016-09-21', 0.07),\n",
       " ('2016-09-21', 1.02),\n",
       " ('2016-09-22', 0.02),\n",
       " ('2016-09-22', 0.09),\n",
       " ('2016-09-22', 0.17),\n",
       " ('2016-09-22', 0.06),\n",
       " ('2016-09-22', 0.01),\n",
       " ('2016-09-22', 0.34),\n",
       " ('2016-09-22', 0.75),\n",
       " ('2016-09-23', 0.0),\n",
       " ('2016-09-23', 0.15),\n",
       " ('2016-09-23', 0.15),\n",
       " ('2016-09-23', 0.0),\n",
       " ('2016-09-23', 0.0),\n",
       " ('2016-09-23', 0.94),\n",
       " ('2016-09-23', 0.33),\n",
       " ('2016-09-24', 0.0),\n",
       " ('2016-09-24', 0.0),\n",
       " ('2016-09-24', 0.0),\n",
       " ('2016-09-24', 0.0),\n",
       " ('2016-09-24', 0.01),\n",
       " ('2016-09-24', 0.27),\n",
       " ('2016-09-25', 0.0),\n",
       " ('2016-09-25', 0.02),\n",
       " ('2016-09-25', 0.0),\n",
       " ('2016-09-25', 0.0),\n",
       " ('2016-09-25', 0.03),\n",
       " ('2016-09-25', 0.04),\n",
       " ('2016-09-26', 0.06),\n",
       " ('2016-09-26', 0.06),\n",
       " ('2016-09-26', 0.02),\n",
       " ('2016-09-26', None),\n",
       " ('2016-09-26', 0.34),\n",
       " ('2016-09-26', 0.17),\n",
       " ('2016-09-26', 1.02),\n",
       " ('2016-09-27', 0.02),\n",
       " ('2016-09-27', 0.12),\n",
       " ('2016-09-27', 0.0),\n",
       " ('2016-09-27', 0.05),\n",
       " ('2016-09-27', 0.17),\n",
       " ('2016-09-27', 1.0),\n",
       " ('2016-09-28', 0.0),\n",
       " ('2016-09-28', 0.08),\n",
       " ('2016-09-28', 0.0),\n",
       " ('2016-09-28', 0.0),\n",
       " ('2016-09-28', 0.0),\n",
       " ('2016-09-28', 0.0),\n",
       " ('2016-09-28', 0.05),\n",
       " ('2016-09-29', 0.0),\n",
       " ('2016-09-29', 0.49),\n",
       " ('2016-09-29', 0.2),\n",
       " ('2016-09-29', 0.04),\n",
       " ('2016-09-29', 0.18),\n",
       " ('2016-09-29', 0.59),\n",
       " ('2016-09-29', 1.49),\n",
       " ('2016-09-30', 0.0),\n",
       " ('2016-09-30', 0.31),\n",
       " ('2016-09-30', 0.06),\n",
       " ('2016-09-30', None),\n",
       " ('2016-09-30', 0.15),\n",
       " ('2016-09-30', 0.25),\n",
       " ('2016-09-30', 0.38),\n",
       " ('2016-10-01', 0.0),\n",
       " ('2016-10-01', 0.14),\n",
       " ('2016-10-01', 0.08),\n",
       " ('2016-10-01', 0.07),\n",
       " ('2016-10-01', 0.14),\n",
       " ('2016-10-01', 1.02),\n",
       " ('2016-10-02', 0.0),\n",
       " ('2016-10-02', 0.02),\n",
       " ('2016-10-02', 0.03),\n",
       " ('2016-10-02', 0.0),\n",
       " ('2016-10-02', 0.06),\n",
       " ('2016-10-02', 0.61),\n",
       " ('2016-10-03', 0.0),\n",
       " ('2016-10-03', 0.04),\n",
       " ('2016-10-03', 0.03),\n",
       " ('2016-10-03', None),\n",
       " ('2016-10-03', 0.0),\n",
       " ('2016-10-03', 0.16),\n",
       " ('2016-10-03', 0.46),\n",
       " ('2016-10-04', 0.0),\n",
       " ('2016-10-04', 0.0),\n",
       " ('2016-10-04', 0.0),\n",
       " ('2016-10-04', None),\n",
       " ('2016-10-04', 0.0),\n",
       " ('2016-10-04', 0.03),\n",
       " ('2016-10-04', 3.46),\n",
       " ('2016-10-05', 0.0),\n",
       " ('2016-10-05', 0.0),\n",
       " ('2016-10-05', 0.0),\n",
       " ('2016-10-05', None),\n",
       " ('2016-10-05', 0.0),\n",
       " ('2016-10-05', 0.01),\n",
       " ('2016-10-05', 0.81),\n",
       " ('2016-10-06', 0.0),\n",
       " ('2016-10-06', 0.05),\n",
       " ('2016-10-06', 0.0),\n",
       " ('2016-10-06', 0.07),\n",
       " ('2016-10-06', 0.0),\n",
       " ('2016-10-06', 0.0),\n",
       " ('2016-10-06', 0.04),\n",
       " ('2016-10-07', 0.0),\n",
       " ('2016-10-07', 0.0),\n",
       " ('2016-10-07', 0.0),\n",
       " ('2016-10-07', None),\n",
       " ('2016-10-07', 0.0),\n",
       " ('2016-10-07', 0.0),\n",
       " ('2016-10-07', 0.01),\n",
       " ('2016-10-08', 0.0),\n",
       " ('2016-10-08', 0.0),\n",
       " ('2016-10-08', 0.0),\n",
       " ('2016-10-08', 0.0),\n",
       " ('2016-10-08', 0.04),\n",
       " ('2016-10-09', 0.0),\n",
       " ('2016-10-09', 0.0),\n",
       " ('2016-10-09', 0.0),\n",
       " ('2016-10-09', 0.0),\n",
       " ('2016-10-09', 0.0),\n",
       " ('2016-10-10', 0.0),\n",
       " ('2016-10-10', 0.0),\n",
       " ('2016-10-10', None),\n",
       " ('2016-10-10', 0.0),\n",
       " ('2016-10-10', 0.0),\n",
       " ('2016-10-10', 0.0),\n",
       " ('2016-10-11', 0.0),\n",
       " ('2016-10-11', 0.02),\n",
       " ('2016-10-11', 0.04),\n",
       " ('2016-10-11', None),\n",
       " ('2016-10-11', 0.0),\n",
       " ('2016-10-11', 0.28),\n",
       " ('2016-10-11', 0.35),\n",
       " ('2016-10-12', 0.0),\n",
       " ('2016-10-12', 0.03),\n",
       " ('2016-10-12', 0.0),\n",
       " ('2016-10-12', 0.0),\n",
       " ('2016-10-12', 0.03),\n",
       " ('2016-10-12', 0.02),\n",
       " ('2016-10-13', 0.0),\n",
       " ('2016-10-13', 0.0),\n",
       " ('2016-10-13', 0.02),\n",
       " ('2016-10-13', None),\n",
       " ('2016-10-13', 0.0),\n",
       " ('2016-10-13', 0.0),\n",
       " ('2016-10-13', 0.06),\n",
       " ('2016-10-14', 0.0),\n",
       " ('2016-10-14', 0.0),\n",
       " ('2016-10-14', 0.0),\n",
       " ('2016-10-14', 0.0),\n",
       " ('2016-10-14', 0.0),\n",
       " ('2016-10-14', 0.0),\n",
       " ('2016-10-15', 0.0),\n",
       " ('2016-10-15', 0.0),\n",
       " ('2016-10-15', 0.02),\n",
       " ('2016-10-15', 0.0),\n",
       " ('2016-10-15', 0.04),\n",
       " ('2016-10-15', 0.33),\n",
       " ('2016-10-16', 0.0),\n",
       " ('2016-10-16', 0.0),\n",
       " ('2016-10-16', 0.0),\n",
       " ('2016-10-16', 0.0),\n",
       " ('2016-10-16', 0.0),\n",
       " ('2016-10-17', 0.01),\n",
       " ('2016-10-17', 0.03),\n",
       " ('2016-10-17', None),\n",
       " ('2016-10-17', None),\n",
       " ('2016-10-17', 0.12),\n",
       " ('2016-10-17', 0.01),\n",
       " ('2016-10-17', 0.38),\n",
       " ('2016-10-18', 0.0),\n",
       " ('2016-10-18', 0.05),\n",
       " ('2016-10-18', 0.03),\n",
       " ('2016-10-18', None),\n",
       " ('2016-10-18', 0.02),\n",
       " ('2016-10-18', 0.02),\n",
       " ('2016-10-18', 0.48),\n",
       " ('2016-10-19', 0.0),\n",
       " ('2016-10-19', 0.06),\n",
       " ('2016-10-19', 0.0),\n",
       " ('2016-10-19', None),\n",
       " ('2016-10-19', 0.0),\n",
       " ('2016-10-19', 0.11),\n",
       " ('2016-10-19', 0.0),\n",
       " ('2016-10-20', 0.0),\n",
       " ('2016-10-20', 0.0),\n",
       " ('2016-10-20', 0.01),\n",
       " ('2016-10-20', None),\n",
       " ('2016-10-20', 0.0),\n",
       " ('2016-10-20', 1.0),\n",
       " ('2016-10-21', 0.05),\n",
       " ('2016-10-21', 0.15),\n",
       " ('2016-10-21', 0.03),\n",
       " ('2016-10-21', None),\n",
       " ('2016-10-21', None),\n",
       " ('2016-10-21', 0.0),\n",
       " ('2016-10-21', 0.09),\n",
       " ('2016-10-22', 0.15),\n",
       " ('2016-10-22', 0.1),\n",
       " ('2016-10-22', 0.0),\n",
       " ('2016-10-22', 0.15),\n",
       " ('2016-10-22', 1.37),\n",
       " ('2016-10-23', 0.01),\n",
       " ('2016-10-23', 0.01),\n",
       " ('2016-10-23', None),\n",
       " ('2016-10-23', 0.0),\n",
       " ('2016-10-23', 0.02),\n",
       " ('2016-10-23', 0.24),\n",
       " ('2016-10-24', 0.0),\n",
       " ('2016-10-24', 0.0),\n",
       " ('2016-10-24', 0.01),\n",
       " ('2016-10-24', None),\n",
       " ('2016-10-24', 0.0),\n",
       " ('2016-10-24', 0.08),\n",
       " ('2016-10-24', 0.7),\n",
       " ('2016-10-25', 0.03),\n",
       " ('2016-10-25', 0.04),\n",
       " ('2016-10-25', 0.0),\n",
       " ('2016-10-25', 0.4),\n",
       " ('2016-10-25', 0.12),\n",
       " ('2016-10-25', 0.11),\n",
       " ('2016-10-25', 0.4),\n",
       " ('2016-10-26', 0.0),\n",
       " ('2016-10-26', 0.06),\n",
       " ('2016-10-26', 0.2),\n",
       " ('2016-10-26', 0.02),\n",
       " ('2016-10-26', 0.01),\n",
       " ('2016-10-26', 0.0),\n",
       " ('2016-10-27', 0.0),\n",
       " ('2016-10-27', 0.11),\n",
       " ('2016-10-27', 0.2),\n",
       " ('2016-10-27', None),\n",
       " ('2016-10-27', 0.08),\n",
       " ('2016-10-27', 0.22),\n",
       " ('2016-10-27', 1.25),\n",
       " ('2016-10-28', 0.0),\n",
       " ('2016-10-28', 0.02),\n",
       " ('2016-10-28', 0.07),\n",
       " ('2016-10-28', None),\n",
       " ('2016-10-28', 0.06),\n",
       " ('2016-10-28', 0.05),\n",
       " ('2016-10-28', 0.37),\n",
       " ('2016-10-29', 0.0),\n",
       " ('2016-10-29', 0.02),\n",
       " ('2016-10-29', 0.26),\n",
       " ('2016-10-29', 0.01),\n",
       " ('2016-10-29', 0.1),\n",
       " ('2016-10-29', 0.25),\n",
       " ('2016-10-30', 0.24),\n",
       " ('2016-10-30', 0.1),\n",
       " ('2016-10-30', 0.14),\n",
       " ('2016-10-30', 0.0),\n",
       " ('2016-10-30', 0.16),\n",
       " ('2016-10-30', 0.95),\n",
       " ('2016-10-31', 0.03),\n",
       " ('2016-10-31', 0.03),\n",
       " ('2016-10-31', 0.0),\n",
       " ('2016-10-31', None),\n",
       " ('2016-10-31', 0.13),\n",
       " ('2016-10-31', 0.07),\n",
       " ('2016-10-31', 1.35),\n",
       " ('2016-11-01', 0.0),\n",
       " ('2016-11-01', 0.01),\n",
       " ('2016-11-01', 0.0),\n",
       " ('2016-11-01', 0.01),\n",
       " ('2016-11-01', 0.1),\n",
       " ('2016-11-01', 0.09),\n",
       " ('2016-11-02', 0.0),\n",
       " ('2016-11-02', 0.0),\n",
       " ('2016-11-02', 0.0),\n",
       " ('2016-11-02', 0.0),\n",
       " ('2016-11-02', 0.0),\n",
       " ('2016-11-02', 0.04),\n",
       " ('2016-11-03', 0.0),\n",
       " ('2016-11-03', 0.0),\n",
       " ('2016-11-03', 0.0),\n",
       " ('2016-11-03', 0.0),\n",
       " ('2016-11-03', 0.0),\n",
       " ('2016-11-03', 0.02),\n",
       " ('2016-11-04', 0.0),\n",
       " ('2016-11-04', 0.0),\n",
       " ('2016-11-04', 0.0),\n",
       " ('2016-11-04', None),\n",
       " ('2016-11-04', 0.0),\n",
       " ('2016-11-04', 0.0),\n",
       " ('2016-11-04', 0.06),\n",
       " ('2016-11-05', 0.0),\n",
       " ('2016-11-05', 0.02),\n",
       " ('2016-11-05', 0.0),\n",
       " ('2016-11-05', 0.02),\n",
       " ('2016-11-05', 0.03),\n",
       " ('2016-11-05', 0.38),\n",
       " ('2016-11-06', 0.0),\n",
       " ('2016-11-06', 0.02),\n",
       " ('2016-11-06', 0.0),\n",
       " ('2016-11-06', 0.0),\n",
       " ('2016-11-06', 0.01),\n",
       " ('2016-11-06', 0.05),\n",
       " ('2016-11-07', 0.0),\n",
       " ('2016-11-07', 0.0),\n",
       " ('2016-11-07', 0.13),\n",
       " ('2016-11-07', None),\n",
       " ('2016-11-07', 0.0),\n",
       " ('2016-11-07', 0.0),\n",
       " ('2016-11-07', 0.05),\n",
       " ('2016-11-08', 0.07),\n",
       " ('2016-11-08', 0.14),\n",
       " ('2016-11-08', 0.02),\n",
       " ('2016-11-08', 0.15),\n",
       " ('2016-11-08', 0.21),\n",
       " ('2016-11-08', 0.53),\n",
       " ('2016-11-09', 0.0),\n",
       " ('2016-11-09', 0.08),\n",
       " ('2016-11-09', 0.17),\n",
       " ('2016-11-09', 0.0),\n",
       " ('2016-11-09', 0.0),\n",
       " ('2016-11-09', 0.11),\n",
       " ('2016-11-09', 0.04),\n",
       " ('2016-11-10', 0.0),\n",
       " ('2016-11-10', 0.0),\n",
       " ('2016-11-10', 0.0),\n",
       " ('2016-11-10', 0.0),\n",
       " ('2016-11-10', 0.0),\n",
       " ('2016-11-10', 0.01),\n",
       " ('2016-11-11', 0.0),\n",
       " ('2016-11-11', 0.0),\n",
       " ('2016-11-11', 0.0),\n",
       " ('2016-11-11', 0.0),\n",
       " ('2016-11-11', 0.0),\n",
       " ('2016-11-11', 0.0),\n",
       " ('2016-11-12', 0.0),\n",
       " ('2016-11-12', 0.0),\n",
       " ('2016-11-12', 0.0),\n",
       " ('2016-11-12', 0.0),\n",
       " ('2016-11-12', 0.0),\n",
       " ('2016-11-12', 0.0),\n",
       " ('2016-11-13', 0.0),\n",
       " ('2016-11-13', 0.0),\n",
       " ('2016-11-13', 0.0),\n",
       " ('2016-11-13', 0.0),\n",
       " ('2016-11-13', 0.0),\n",
       " ('2016-11-13', 0.0),\n",
       " ('2016-11-14', 0.0),\n",
       " ('2016-11-14', 0.06),\n",
       " ('2016-11-14', 0.05),\n",
       " ('2016-11-14', 0.02),\n",
       " ('2016-11-14', 0.0),\n",
       " ('2016-11-14', 0.0),\n",
       " ('2016-11-14', 0.02),\n",
       " ('2016-11-15', 0.0),\n",
       " ('2016-11-15', 0.0),\n",
       " ('2016-11-15', 0.0),\n",
       " ('2016-11-15', None),\n",
       " ('2016-11-15', 0.0),\n",
       " ('2016-11-15', 0.0),\n",
       " ('2016-11-15', 0.05),\n",
       " ('2016-11-16', 0.0),\n",
       " ('2016-11-16', 0.14),\n",
       " ('2016-11-16', 0.18),\n",
       " ('2016-11-16', None),\n",
       " ('2016-11-16', 0.07),\n",
       " ('2016-11-16', 0.24),\n",
       " ('2016-11-16', 0.91),\n",
       " ('2016-11-17', 0.0),\n",
       " ('2016-11-17', 0.03),\n",
       " ('2016-11-17', 0.0),\n",
       " ('2016-11-17', None),\n",
       " ('2016-11-17', 0.0),\n",
       " ('2016-11-17', 0.01),\n",
       " ('2016-11-17', 0.02),\n",
       " ('2016-11-18', 0.0),\n",
       " ('2016-11-18', 0.01),\n",
       " ('2016-11-18', None),\n",
       " ('2016-11-18', 0.02),\n",
       " ('2016-11-18', 0.0),\n",
       " ('2016-11-19', 0.03),\n",
       " ('2016-11-19', 0.11),\n",
       " ('2016-11-19', 0.13),\n",
       " ('2016-11-19', 0.11),\n",
       " ('2016-11-20', 0.05),\n",
       " ('2016-11-20', 0.11),\n",
       " ('2016-11-20', 0.4),\n",
       " ('2016-11-20', 0.39),\n",
       " ('2016-11-20', None),\n",
       " ('2016-11-21', 0.01),\n",
       " ('2016-11-21', 0.02),\n",
       " ('2016-11-21', None),\n",
       " ('2016-11-21', 0.07),\n",
       " ('2016-11-21', 0.11),\n",
       " ('2016-11-21', 2.87),\n",
       " ('2016-11-22', 0.13),\n",
       " ('2016-11-22', 0.41),\n",
       " ('2016-11-22', None),\n",
       " ('2016-11-22', None),\n",
       " ('2016-11-22', 0.31),\n",
       " ('2016-11-22', 2.05),\n",
       " ('2016-11-22', 2.11),\n",
       " ('2016-11-23', 0.14),\n",
       " ('2016-11-23', 0.03),\n",
       " ('2016-11-23', None),\n",
       " ('2016-11-23', 0.03),\n",
       " ('2016-11-23', 0.25),\n",
       " ('2016-11-23', 0.22),\n",
       " ('2016-11-24', 0.05),\n",
       " ('2016-11-24', 0.2),\n",
       " ('2016-11-24', 0.21),\n",
       " ('2016-11-24', 0.3),\n",
       " ('2016-11-24', 0.72),\n",
       " ('2016-11-25', 0.05),\n",
       " ('2016-11-25', 0.05),\n",
       " ('2016-11-25', None),\n",
       " ('2016-11-25', 0.11),\n",
       " ('2016-11-25', 0.08),\n",
       " ('2016-11-25', 1.03),\n",
       " ('2016-11-26', 0.05),\n",
       " ('2016-11-26', 0.05),\n",
       " ('2016-11-26', 0.02),\n",
       " ('2016-11-26', 0.03),\n",
       " ('2016-11-26', 0.06),\n",
       " ('2016-11-26', 0.3),\n",
       " ('2016-11-27', 0.0),\n",
       " ('2016-11-27', 0.06),\n",
       " ('2016-11-27', 0.03),\n",
       " ('2016-11-27', 0.0),\n",
       " ('2016-11-27', 0.17),\n",
       " ('2016-11-27', 0.29),\n",
       " ('2016-11-28', 0.01),\n",
       " ('2016-11-28', 0.02),\n",
       " ('2016-11-28', 0.0),\n",
       " ('2016-11-28', None),\n",
       " ('2016-11-28', 0.0),\n",
       " ('2016-11-28', 0.0),\n",
       " ('2016-11-28', 0.69),\n",
       " ('2016-11-29', 0.0),\n",
       " ('2016-11-29', 0.04),\n",
       " ('2016-11-29', 0.04),\n",
       " ('2016-11-29', None),\n",
       " ('2016-11-29', 0.06),\n",
       " ('2016-11-29', 0.09),\n",
       " ('2016-11-29', 0.2),\n",
       " ('2016-11-30', 0.14),\n",
       " ('2016-11-30', 0.05),\n",
       " ('2016-11-30', 0.03),\n",
       " ('2016-11-30', None),\n",
       " ('2016-11-30', 0.0),\n",
       " ('2016-11-30', 0.05),\n",
       " ('2016-11-30', 0.79),\n",
       " ('2016-12-01', 0.12),\n",
       " ('2016-12-01', 0.33),\n",
       " ('2016-12-01', 0.07),\n",
       " ('2016-12-01', None),\n",
       " ('2016-12-01', 0.16),\n",
       " ('2016-12-01', 0.37),\n",
       " ('2016-12-01', 0.72),\n",
       " ('2016-12-02', 0.03),\n",
       " ('2016-12-02', 0.3),\n",
       " ('2016-12-02', 0.4),\n",
       " ('2016-12-02', None),\n",
       " ('2016-12-02', 0.01),\n",
       " ('2016-12-02', 0.35),\n",
       " ('2016-12-02', 1.27),\n",
       " ('2016-12-03', 0.0),\n",
       " ('2016-12-03', 0.04),\n",
       " ('2016-12-03', 0.26),\n",
       " ('2016-12-03', 0.02),\n",
       " ('2016-12-03', 0.77),\n",
       " ('2016-12-03', 1.62),\n",
       " ('2016-12-04', 0.03),\n",
       " ('2016-12-04', 0.1),\n",
       " ('2016-12-04', 0.0),\n",
       " ('2016-12-04', 0.32),\n",
       " ('2016-12-04', 0.04),\n",
       " ('2016-12-04', 0.31),\n",
       " ('2016-12-05', 0.43),\n",
       " ('2016-12-05', 0.34),\n",
       " ('2016-12-05', 0.2),\n",
       " ('2016-12-05', None),\n",
       " ('2016-12-05', 0.45),\n",
       " ('2016-12-05', 0.22),\n",
       " ('2016-12-05', 1.6),\n",
       " ('2016-12-06', 0.02),\n",
       " ('2016-12-06', 0.02),\n",
       " ('2016-12-06', None),\n",
       " ('2016-12-06', 0.0),\n",
       " ('2016-12-06', 0.0),\n",
       " ('2016-12-06', 0.0),\n",
       " ('2016-12-07', 0.0),\n",
       " ('2016-12-07', 0.17),\n",
       " ('2016-12-07', None),\n",
       " ('2016-12-07', None),\n",
       " ('2016-12-07', 0.07),\n",
       " ('2016-12-07', 0.12),\n",
       " ('2016-12-07', 0.02),\n",
       " ('2016-12-08', 0.03),\n",
       " ('2016-12-08', 0.03),\n",
       " ('2016-12-08', 0.02),\n",
       " ('2016-12-08', 0.27),\n",
       " ('2016-12-08', 0.01),\n",
       " ('2016-12-08', 0.07),\n",
       " ('2016-12-08', 0.03),\n",
       " ('2016-12-09', 0.52),\n",
       " ('2016-12-09', 0.34),\n",
       " ('2016-12-09', 0.26),\n",
       " ('2016-12-09', None),\n",
       " ('2016-12-09', 0.31),\n",
       " ('2016-12-09', 0.42),\n",
       " ('2016-12-10', 0.05),\n",
       " ('2016-12-10', 0.02),\n",
       " ('2016-12-10', 0.0),\n",
       " ('2016-12-10', None),\n",
       " ('2016-12-10', 0.02),\n",
       " ('2016-12-10', 0.04),\n",
       " ('2016-12-11', 0.04),\n",
       " ('2016-12-11', 0.02),\n",
       " ('2016-12-11', 0.06),\n",
       " ('2016-12-11', 0.0),\n",
       " ('2016-12-11', 0.13),\n",
       " ('2016-12-12', 0.01),\n",
       " ('2016-12-12', 0.01),\n",
       " ('2016-12-12', None),\n",
       " ('2016-12-12', 0.02),\n",
       " ('2016-12-12', 0.0),\n",
       " ('2016-12-12', 0.0),\n",
       " ('2016-12-12', 0.01),\n",
       " ('2016-12-13', 0.05),\n",
       " ('2016-12-13', 0.1),\n",
       " ('2016-12-13', 0.34),\n",
       " ('2016-12-13', None),\n",
       " ('2016-12-13', 0.15),\n",
       " ('2016-12-13', 0.04),\n",
       " ('2016-12-13', 0.09),\n",
       " ('2016-12-14', 0.03),\n",
       " ('2016-12-14', 0.05),\n",
       " ('2016-12-14', 0.12),\n",
       " ('2016-12-14', None),\n",
       " ('2016-12-14', 0.05),\n",
       " ('2016-12-14', 0.92),\n",
       " ('2016-12-14', 0.33),\n",
       " ('2016-12-15', 0.0),\n",
       " ('2016-12-15', 0.02),\n",
       " ('2016-12-15', 0.07),\n",
       " ('2016-12-15', None),\n",
       " ('2016-12-15', 0.0),\n",
       " ('2016-12-15', 0.14),\n",
       " ('2016-12-15', 0.03),\n",
       " ('2016-12-16', 0.0),\n",
       " ('2016-12-16', 0.01),\n",
       " ('2016-12-16', 0.0),\n",
       " ('2016-12-16', None),\n",
       " ('2016-12-16', 0.0),\n",
       " ('2016-12-16', 0.03),\n",
       " ('2016-12-16', 0.0),\n",
       " ('2016-12-17', 0.01),\n",
       " ('2016-12-17', 0.11),\n",
       " ('2016-12-17', 0.0),\n",
       " ('2016-12-17', 0.16),\n",
       " ('2016-12-17', 0.07),\n",
       " ('2016-12-18', 0.13),\n",
       " ('2016-12-18', 0.29),\n",
       " ('2016-12-18', 0.04),\n",
       " ('2016-12-18', 0.27),\n",
       " ('2016-12-18', 0.16),\n",
       " ('2016-12-18', None),\n",
       " ('2016-12-19', 0.01),\n",
       " ('2016-12-19', 0.21),\n",
       " ('2016-12-19', 0.0),\n",
       " ('2016-12-19', None),\n",
       " ('2016-12-19', 0.02),\n",
       " ('2016-12-19', 0.03),\n",
       " ('2016-12-19', 0.15),\n",
       " ('2016-12-20', 0.0),\n",
       " ('2016-12-20', 0.02),\n",
       " ('2016-12-20', 0.0),\n",
       " ('2016-12-20', None),\n",
       " ('2016-12-20', 0.01),\n",
       " ('2016-12-20', 0.0),\n",
       " ('2016-12-20', 0.0),\n",
       " ('2016-12-21', 0.0),\n",
       " ('2016-12-21', 0.03),\n",
       " ('2016-12-21', 0.09),\n",
       " ('2016-12-21', 0.06),\n",
       " ('2016-12-21', 0.06),\n",
       " ('2016-12-21', 0.11),\n",
       " ('2016-12-21', 0.55),\n",
       " ('2016-12-22', 0.01),\n",
       " ('2016-12-22', 0.17),\n",
       " ('2016-12-22', 0.05),\n",
       " ('2016-12-22', None),\n",
       " ('2016-12-22', 0.14),\n",
       " ('2016-12-22', 0.86),\n",
       " ('2016-12-22', 1.24),\n",
       " ('2016-12-23', 0.01),\n",
       " ('2016-12-23', 0.1),\n",
       " ('2016-12-23', 0.03),\n",
       " ('2016-12-23', None),\n",
       " ('2016-12-23', 0.02),\n",
       " ('2016-12-23', 0.24),\n",
       " ('2016-12-23', 0.83),\n",
       " ('2016-12-24', 0.01),\n",
       " ('2016-12-24', 0.14),\n",
       " ('2016-12-24', 0.13),\n",
       " ('2016-12-24', 0.06),\n",
       " ('2016-12-24', 0.2),\n",
       " ('2016-12-24', 1.08),\n",
       " ('2016-12-25', 0.0),\n",
       " ('2016-12-25', 0.03),\n",
       " ('2016-12-25', 0.0),\n",
       " ('2016-12-25', 0.02),\n",
       " ('2016-12-25', 0.38),\n",
       " ('2016-12-26', 0.02),\n",
       " ('2016-12-26', 0.26),\n",
       " ('2016-12-26', None),\n",
       " ('2016-12-26', 0.06),\n",
       " ('2016-12-26', 0.22),\n",
       " ('2016-12-26', 1.48),\n",
       " ('2016-12-27', 0.0),\n",
       " ('2016-12-27', 0.03),\n",
       " ('2016-12-27', 0.02),\n",
       " ('2016-12-27', 0.0),\n",
       " ('2016-12-27', 0.05),\n",
       " ('2016-12-27', 0.14),\n",
       " ('2016-12-28', 0.02),\n",
       " ('2016-12-28', 0.09),\n",
       " ('2016-12-28', 0.01),\n",
       " ('2016-12-28', None),\n",
       " ('2016-12-28', 0.06),\n",
       " ('2016-12-28', 0.09),\n",
       " ('2016-12-28', 0.14),\n",
       " ('2016-12-29', 0.04),\n",
       " ('2016-12-29', 0.18),\n",
       " ('2016-12-29', 0.56),\n",
       " ('2016-12-29', None),\n",
       " ('2016-12-29', 0.05),\n",
       " ('2016-12-29', 0.52),\n",
       " ('2016-12-29', 1.03),\n",
       " ('2016-12-30', 0.12),\n",
       " ('2016-12-30', 0.21),\n",
       " ('2016-12-30', 0.29),\n",
       " ('2016-12-30', None),\n",
       " ('2016-12-30', 0.07),\n",
       " ('2016-12-30', 0.29),\n",
       " ('2016-12-30', 2.37),\n",
       " ('2016-12-31', 0.01),\n",
       " ('2016-12-31', 0.62),\n",
       " ('2016-12-31', 0.36),\n",
       " ('2016-12-31', 0.25),\n",
       " ('2016-12-31', 0.9),\n",
       " ('2017-01-01', 0.0),\n",
       " ('2017-01-01', 0.29),\n",
       " ('2017-01-01', 0.0),\n",
       " ('2017-01-01', None),\n",
       " ('2017-01-01', 0.03),\n",
       " ('2017-01-01', 0.03),\n",
       " ('2017-01-02', 0.0),\n",
       " ('2017-01-02', 0.0),\n",
       " ('2017-01-02', 0.01),\n",
       " ('2017-01-02', 0.01),\n",
       " ('2017-01-02', 0.0),\n",
       " ('2017-01-03', 0.0),\n",
       " ('2017-01-03', 0.0),\n",
       " ('2017-01-03', 0.0),\n",
       " ('2017-01-03', None),\n",
       " ('2017-01-03', 0.0),\n",
       " ('2017-01-03', 0.0),\n",
       " ('2017-01-04', 0.0),\n",
       " ('2017-01-04', 0.0),\n",
       " ('2017-01-04', 0.0),\n",
       " ('2017-01-04', 0.18),\n",
       " ('2017-01-04', 0.0),\n",
       " ('2017-01-04', 0.0),\n",
       " ('2017-01-05', 0.0),\n",
       " ('2017-01-05', 0.0),\n",
       " ('2017-01-05', 0.0),\n",
       " ('2017-01-05', 0.42),\n",
       " ('2017-01-05', 0.06),\n",
       " ('2017-01-05', 0.47),\n",
       " ('2017-01-06', 0.0),\n",
       " ('2017-01-06', 0.0),\n",
       " ('2017-01-06', 0.59),\n",
       " ('2017-01-06', 0.01),\n",
       " ('2017-01-06', 0.1),\n",
       " ('2017-01-06', 0.1),\n",
       " ('2017-01-07', 0.0),\n",
       " ('2017-01-07', 0.06),\n",
       " ('2017-01-07', 0.0),\n",
       " ('2017-01-07', 0.0),\n",
       " ('2017-01-07', 0.0),\n",
       " ('2017-01-07', 0.0),\n",
       " ('2017-01-08', 0.0),\n",
       " ('2017-01-08', 0.0),\n",
       " ('2017-01-08', 0.03),\n",
       " ('2017-01-08', 0.0),\n",
       " ('2017-01-08', 0.0),\n",
       " ('2017-01-08', 0.03),\n",
       " ('2017-01-09', 0.0),\n",
       " ('2017-01-09', 0.0),\n",
       " ('2017-01-09', 0.0),\n",
       " ('2017-01-09', None),\n",
       " ('2017-01-09', 0.0),\n",
       " ('2017-01-09', 0.0),\n",
       " ('2017-01-09', 0.0),\n",
       " ('2017-01-10', 0.0),\n",
       " ('2017-01-10', 0.0),\n",
       " ('2017-01-10', 0.0),\n",
       " ('2017-01-10', None),\n",
       " ('2017-01-10', 0.0),\n",
       " ('2017-01-10', 0.0),\n",
       " ('2017-01-10', 0.0),\n",
       " ('2017-01-11', 0.0),\n",
       " ('2017-01-11', 0.0),\n",
       " ('2017-01-11', 0.0),\n",
       " ('2017-01-11', None),\n",
       " ('2017-01-11', 0.0),\n",
       " ('2017-01-11', 0.0),\n",
       " ('2017-01-12', 0.0),\n",
       " ('2017-01-12', 0.0),\n",
       " ('2017-01-12', None),\n",
       " ('2017-01-12', None),\n",
       " ('2017-01-12', 0.0),\n",
       " ('2017-01-12', 0.0),\n",
       " ('2017-01-13', 0.0),\n",
       " ('2017-01-13', 0.0),\n",
       " ('2017-01-13', None),\n",
       " ('2017-01-13', None),\n",
       " ('2017-01-13', 0.0),\n",
       " ('2017-01-13', 0.0),\n",
       " ('2017-01-14', 0.0),\n",
       " ('2017-01-14', 0.0),\n",
       " ('2017-01-14', 0.0),\n",
       " ('2017-01-14', 0.01),\n",
       " ('2017-01-14', 0.0),\n",
       " ('2017-01-15', 0.0),\n",
       " ('2017-01-15', 0.0),\n",
       " ('2017-01-15', None),\n",
       " ('2017-01-15', 0.0),\n",
       " ('2017-01-15', 0.01),\n",
       " ('2017-01-16', 0.0),\n",
       " ('2017-01-16', 0.0),\n",
       " ('2017-01-16', None),\n",
       " ('2017-01-16', 0.0),\n",
       " ('2017-01-16', 0.0),\n",
       " ('2017-01-16', 0.0),\n",
       " ('2017-01-17', 0.0),\n",
       " ('2017-01-17', 0.0),\n",
       " ('2017-01-17', 0.0),\n",
       " ('2017-01-17', 0.0),\n",
       " ('2017-01-17', 0.0),\n",
       " ('2017-01-17', 0.0),\n",
       " ('2017-01-18', 0.0),\n",
       " ('2017-01-18', 0.0),\n",
       " ('2017-01-18', 0.0),\n",
       " ('2017-01-18', 0.0),\n",
       " ('2017-01-18', None),\n",
       " ('2017-01-18', 0.0),\n",
       " ('2017-01-18', 0.07),\n",
       " ('2017-01-19', 0.0),\n",
       " ('2017-01-19', 0.0),\n",
       " ('2017-01-19', 0.0),\n",
       " ('2017-01-19', None),\n",
       " ('2017-01-19', 0.0),\n",
       " ('2017-01-19', 0.02),\n",
       " ('2017-01-19', 0.0),\n",
       " ('2017-01-20', 0.0),\n",
       " ('2017-01-20', 0.0),\n",
       " ('2017-01-20', 0.0),\n",
       " ('2017-01-20', None),\n",
       " ('2017-01-20', 0.0),\n",
       " ('2017-01-20', 0.0),\n",
       " ('2017-01-20', 0.0),\n",
       " ('2017-01-21', 0.0),\n",
       " ('2017-01-21', 0.04),\n",
       " ('2017-01-21', 0.02),\n",
       " ('2017-01-21', 0.11),\n",
       " ('2017-01-21', 0.03),\n",
       " ('2017-01-21', 0.08),\n",
       " ('2017-01-22', 0.16),\n",
       " ('2017-01-22', 0.01),\n",
       " ('2017-01-22', 0.04),\n",
       " ('2017-01-22', 0.09),\n",
       " ('2017-01-22', 0.72),\n",
       " ('2017-01-23', 0.0),\n",
       " ('2017-01-23', 0.08),\n",
       " ('2017-01-23', None),\n",
       " ('2017-01-23', None),\n",
       " ('2017-01-23', 0.0),\n",
       " ('2017-01-23', 0.01),\n",
       " ('2017-01-23', 0.85),\n",
       " ('2017-01-24', 0.04),\n",
       " ('2017-01-24', 0.15),\n",
       " ('2017-01-24', None),\n",
       " ('2017-01-24', 0.08),\n",
       " ('2017-01-24', 0.13),\n",
       " ('2017-01-24', 1.85),\n",
       " ('2017-01-25', 0.03),\n",
       " ('2017-01-25', 0.12),\n",
       " ('2017-01-25', None),\n",
       " ('2017-01-25', None),\n",
       " ('2017-01-25', 0.0),\n",
       " ('2017-01-25', 0.79),\n",
       " ('2017-01-25', 2.64),\n",
       " ('2017-01-26', 0.0),\n",
       " ('2017-01-26', 0.0),\n",
       " ('2017-01-26', 0.01),\n",
       " ('2017-01-26', 0.0),\n",
       " ('2017-01-26', 0.0),\n",
       " ('2017-01-26', 0.0),\n",
       " ('2017-01-26', 0.1),\n",
       " ('2017-01-27', 0.0),\n",
       " ('2017-01-27', 0.0),\n",
       " ('2017-01-27', 0.0),\n",
       " ('2017-01-27', 0.0),\n",
       " ('2017-01-27', 0.0),\n",
       " ('2017-01-27', 0.03),\n",
       " ('2017-01-27', 0.03),\n",
       " ('2017-01-28', 0.0),\n",
       " ('2017-01-28', 0.14),\n",
       " ('2017-01-28', 0.0),\n",
       " ('2017-01-28', 0.0),\n",
       " ('2017-01-28', 0.0),\n",
       " ('2017-01-29', 0.18),\n",
       " ('2017-01-29', 0.0),\n",
       " ...]"
      ]
     },
     "execution_count": 279,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#* Select only the `date` and `prcp` values.\n",
    "\n",
    "precipitation = session.query(measurement.date, measurement.prcp).\\\n",
    "                filter(measurement.date>year_date).\\\n",
    "                order_by(measurement.date).all()\n",
    "precipitation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 280,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>prcp</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2016-08-24</td>\n",
       "      <td>0.08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2016-08-24</td>\n",
       "      <td>2.15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2016-08-24</td>\n",
       "      <td>2.28</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2016-08-24</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2016-08-24</td>\n",
       "      <td>1.22</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         date  prcp\n",
       "0  2016-08-24  0.08\n",
       "1  2016-08-24  2.15\n",
       "2  2016-08-24  2.28\n",
       "3  2016-08-24   NaN\n",
       "4  2016-08-24  1.22"
      ]
     },
     "execution_count": 280,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#* Load the query results into a Pandas DataFrame and set the index to the date column.\n",
    "precipitation_df = pd.DataFrame(data=precipitation, columns=[\"date\", \"prcp\"])\n",
    "precipitation_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 281,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>prcp</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>date</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2016-08-24</th>\n",
       "      <td>0.08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-08-24</th>\n",
       "      <td>2.15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-08-24</th>\n",
       "      <td>2.28</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-08-24</th>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-08-24</th>\n",
       "      <td>1.22</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            prcp\n",
       "date            \n",
       "2016-08-24  0.08\n",
       "2016-08-24  2.15\n",
       "2016-08-24  2.28\n",
       "2016-08-24   NaN\n",
       "2016-08-24  1.22"
      ]
     },
     "execution_count": 281,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "precipitation_df_date_index = precipitation_df.set_index(\"date\")\n",
    "precipitation_df_date_index.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 282,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 432x288 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#* Plot the results using the DataFrame `plot` method.\n",
    "precipitation_df.plot('date','prcp')\n",
    "plt.xlabel('Date', size=13)\n",
    "plt.ylabel('Precipitation', size=13)\n",
    "plt.legend(['precipitation'])\n",
    "plt.show()\n",
    "plt.savefig(\"precipitation.png\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 283,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>prcp</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>2015.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>0.176462</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.460288</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>0.020000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>0.130000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>6.700000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              prcp\n",
       "count  2015.000000\n",
       "mean      0.176462\n",
       "std       0.460288\n",
       "min       0.000000\n",
       "25%       0.000000\n",
       "50%       0.020000\n",
       "75%       0.130000\n",
       "max       6.700000"
      ]
     },
     "execution_count": 283,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#* Use Pandas to print the summary statistics for the precipitation data.\n",
    "precipitation_df.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Station Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 284,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "9"
      ]
     },
     "execution_count": 284,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#* Design a query to calculate the total number of stations.\n",
    "session.query(measurement).group_by(measurement.station).count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 285,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('USC00519281', 2772),\n",
       " ('USC00519397', 2724),\n",
       " ('USC00513117', 2709),\n",
       " ('USC00519523', 2669),\n",
       " ('USC00516128', 2612),\n",
       " ('USC00514830', 2202),\n",
       " ('USC00511918', 1979),\n",
       " ('USC00517948', 1372),\n",
       " ('USC00518838', 511)]"
      ]
     },
     "execution_count": 285,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#* Design a query to find the most active stations.\n",
    "#* List the stations and observation counts in descending order\n",
    "actv_stations = session.query(measurement.station, func.count(measurement.tobs)).\\\n",
    "                group_by(measurement.station).\\\n",
    "                order_by(func.count(measurement.tobs).desc()).all()\n",
    "actv_stations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 286,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "USC00519281\n"
     ]
    }
   ],
   "source": [
    "#* Which station has the highest number of observations?\n",
    "#* Hint: You may need to use functions such as `func.min`, `func.max`, `func.avg`, and `func.count` in your queries.\n",
    "\n",
    "most_active=actv_stations [0][0]\n",
    "print(most_active)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 287,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>station</th>\n",
       "      <th>date</th>\n",
       "      <th>tobs</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>USC00519281</td>\n",
       "      <td>2016-08-24</td>\n",
       "      <td>77.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>USC00519281</td>\n",
       "      <td>2016-08-25</td>\n",
       "      <td>80.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>USC00519281</td>\n",
       "      <td>2016-08-26</td>\n",
       "      <td>80.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>USC00519281</td>\n",
       "      <td>2016-08-27</td>\n",
       "      <td>75.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>USC00519281</td>\n",
       "      <td>2016-08-28</td>\n",
       "      <td>73.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       station        date  tobs\n",
       "0  USC00519281  2016-08-24  77.0\n",
       "1  USC00519281  2016-08-25  80.0\n",
       "2  USC00519281  2016-08-26  80.0\n",
       "3  USC00519281  2016-08-27  75.0\n",
       "4  USC00519281  2016-08-28  73.0"
      ]
     },
     "execution_count": 287,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#* Design a query to retrieve the last 12 months of temperature observation data (tobs).\n",
    "#* Filter by the station with the highest number of observations.\n",
    "temp = session.query(measurement.station, measurement.date, measurement.tobs).\\\n",
    "                filter(measurement.station == most_active).\\\n",
    "                filter(measurement.date > year_date).\\\n",
    "                order_by(measurement.date).all()\n",
    "temp = pd.DataFrame(temp)\n",
    "temp.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 288,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 432x288 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#* Plot the results as a histogram with `bins=12`.\n",
    "plt.hist(temp['tobs'],12)\n",
    "plt.xlabel(\"Temperature\", size=13)\n",
    "plt.ylabel(\"Frequency\", size=13)\n",
    "plt.legend([\"Temperature Observation\"])\n",
    "plt.show()\n",
    "\n",
    "plt.savefig(\"Temperature.png\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Climate App"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 235,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Now that you have completed your initial analysis, design a Flask API based on the queries that you have just developed.\n",
    "#* Use FLASK to create your routes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 164,
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (<ipython-input-164-d1b1e9af0ff9>, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-164-d1b1e9af0ff9>\"\u001b[0;36m, line \u001b[0;32m1\u001b[0m\n\u001b[0;31m    Now that you have completed your initial analysis, design a Flask API based on the queries that you have just developed.\u001b[0m\n\u001b[0m           ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "### Routes\n",
    "#* `/api/v1.0/precipitation`\n",
    "#  * Query for the dates and temperature observations from the last year.\n",
    "#  * Convert the query results to a Dictionary using `date` as the key and `tobs` as the value.\n",
    "#  * Return the JSON representation of your dictionary.\n",
    "\n",
    "#* `/api/v1.0/stations`\n",
    " # * Return a JSON list of stations from the dataset.\n",
    "\n",
    "* `/api/v1.0/tobs`\n",
    "  * Return a JSON list of Temperature Observations (tobs) for the previous year\n",
    "\n",
    "* `/api/v1.0/<start>` and `/api/v1.0/<start>/<end>`\n",
    "  * Return a JSON list of the minimum temperature, the average temperature, and the max temperature for a given start or start-end range.\n",
    "  * When given the start only, calculate `TMIN`, `TAVG`, and `TMAX` for all dates greater than and equal to the start date.\n",
    "  * When given the start and the end date, calculate the `TMIN`, `TAVG`, and `TMAX` for dates between the start and end date inclusive.\n",
    "\n",
    "## Hints\n",
    "\n",
    "* You will need to join the station and measurement tables for some of the analysis queries.\n",
    "\n",
    "* Use Flask `jsonify` to convert your API data into a valid JSON response object."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 270,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>station</th>\n",
       "      <th>date</th>\n",
       "      <th>tobs</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>USC00519281</td>\n",
       "      <td>2016-08-24</td>\n",
       "      <td>77.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>USC00519281</td>\n",
       "      <td>2016-08-25</td>\n",
       "      <td>80.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>USC00519281</td>\n",
       "      <td>2016-08-26</td>\n",
       "      <td>80.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>USC00519281</td>\n",
       "      <td>2016-08-27</td>\n",
       "      <td>75.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>USC00519281</td>\n",
       "      <td>2016-08-28</td>\n",
       "      <td>73.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       station        date  tobs\n",
       "0  USC00519281  2016-08-24  77.0\n",
       "1  USC00519281  2016-08-25  80.0\n",
       "2  USC00519281  2016-08-26  80.0\n",
       "3  USC00519281  2016-08-27  75.0\n",
       "4  USC00519281  2016-08-28  73.0"
      ]
     },
     "execution_count": 270,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "precipitation.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 271,
   "metadata": {},
   "outputs": [],
   "source": [
    "#PRECIPITATION QUERY\n",
    "#* `/api/v1.0/precipitation`\n",
    "#  * Query for the dates and temperature observations from the last year.\n",
    "#  * Convert the query results to a Dictionary using `date` as the key and `tobs` as the value.\n",
    "#  * Return the JSON representation of your dictionary.\n",
    "precipitation = pd.DataFrame(temp)\n",
    "dict_dct = precipitation.to_dict()[\"tobs\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 269,
   "metadata": {},
   "outputs": [],
   "source": [
    "#STATIONS QUERY\n",
    " #* `/api/v1.0/stations`\n",
    " # * Return a JSON list of stations from the dataset.\n",
    "\n",
    "stations_query = session.query(station.id,station.station,station.name, station.latitude, station.longitude,station.elevation).all()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 263,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'Measurement' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-263-3b13eff26c11>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;31m#Design a query to find the most active stations\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0mactive_tobs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msession\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mquery\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mMeasurement\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstation\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mMeasurement\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdate\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mMeasurement\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtobs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfilter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mMeasurement\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdate\u001b[0m\u001b[0;34m>=\u001b[0m\u001b[0mlast_year\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mMeasurement\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstation\u001b[0m\u001b[0;34m==\u001b[0m\u001b[0mactive_stations\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0morder_by\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mMeasurement\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtobs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mall\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0;31m#List the stations and obsevation counts in descending order\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;31m#print(active_stations)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'Measurement' is not defined"
     ]
    }
   ],
   "source": [
    "#TOBS QUERY\n",
    "\n",
    "#Design a query to find the most active stations\n",
    "\n",
    "#List the stations and obsevation counts in descending order\n",
    "#print(active_stations)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#START/END QUERY#********\n",
    "\n",
    "#Design a query to retrieve the last 12 months of temperature observation data (tobs) for the most active station\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 268,
   "metadata": {},
   "outputs": [],
   "source": [
    "app = Flask(__name__)\n",
    "\n",
    "#measurement = Base.classes.measurement\n",
    "#station = Base.classes.station\n",
    "\n",
    "#create query for /api/v1.0/precipitation\n",
    "temp = session.query(measurement.date,measurement.tobs).filter(measurement.date>=year_date).all()\n",
    "\n",
    "df = pd.DataFrame(all_temp)\n",
    "df = df.set_index(\"date\")\n",
    "dict_df = df.to_dict()[\"tobs\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 238,
   "metadata": {},
   "outputs": [],
   "source": [
    "@app.route(\"/\")\n",
    "def welcome():\n",
    "    print(\"Server received a new request\")\n",
    "    return \"Welcome to the Climate App! Below are all available api routes: </br>\" + \\\n",
    "            f\"/api/v1.0/precipitation</br>\" + \\\n",
    "            f\"/api/v1.0/stations</br>\" + \\\n",
    "            f\"/api/v1.0/tobs</br>\" + \\\n",
    "            f\"/api/v1.0//api/v1.0/<start>` and `/api/v1.0/<start>/<end>`\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 222,
   "metadata": {},
   "outputs": [],
   "source": [
    "@app.route(\"/api/v1.0/precipitation\")\n",
    "def precipitation():\n",
    "    print(\"Server received request for 'Precipitation' data\")\n",
    "    return jsonify(dict_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 223,
   "metadata": {},
   "outputs": [],
   "source": [
    "@app.route(\"/api/v1.0/stations\")\n",
    "def stations():\n",
    "    print(\"Server received request for 'Stations' data\")\n",
    "    return jsonify(stations_query)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 224,
   "metadata": {},
   "outputs": [],
   "source": [
    "@app.route(\"/api/v1.0/tobs\")\n",
    "def tobs():\n",
    "    print(\"Server received request for 'Temperature Observations' data\")\n",
    "    return jsonify(active_tobs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 225,
   "metadata": {},
   "outputs": [],
   "source": [
    "@app.route(\"/api/v1.0/<start>\")\n",
    "def temp(start):\n",
    "    print(\"Server received request for dynamic temperature data\")\n",
    "    try: \n",
    "        #verify start date and end date are in the right format\n",
    "        s_date = dt.datetime.strptime(start,\"%y-%m-%d\")\n",
    "        e_date = date.today()\n",
    "        \n",
    "        #find matching dates from the previous year\n",
    "        p_s_date = s_date-dt.timedelta(365)\n",
    "        p_e_date = e_date-dt.timedelta(365)\n",
    "        \n",
    "        #query measurements to see what the weather was like the previous year\n",
    "        print(\"Searching for weather data from \" + str(p_s_date) + \" to \" + str(p_e_date))\n",
    "        \n",
    "        weather_data = session.query(Measurement.date,func.avg(Measurement.tobs)).filter(Measurement.date>=p_s_date,Measurement.date<=p_e_date).group_by(Measurement.date).all()\n",
    "        \n",
    "        df_weather = pd.DataFrame(data=weather_data,columns=[\"date\",\"temp\"])\n",
    "        min_temp = df_weather[\"temp\"].min()\n",
    "        max_temp = df_weather[\"temp\"].max()\n",
    "        mean_temp = df_weather[\"temp\"].mean()\n",
    "        \n",
    "        print(\"min_temp, mean_temp, and max_temp are returned\")\n",
    "        return jsonify({'TMIN': min_temp}, {'TAVG': mean_temp}, {'TMAX': max_temp})\n",
    "        \n",
    "    except:\n",
    "        print(\"input date is not in correct format. Dates should be formated as %y-%d-%y\")\n",
    "    return jsonify(temp_summary)\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 226,
   "metadata": {},
   "outputs": [],
   "source": [
    "@app.route(\"/api/v1.0/<start>/<end>\")\n",
    "def temp_2(start,end):\n",
    "    print(\"Server received request for dynamic temperature page with start and end...\")\n",
    "    try: \n",
    "        #verify start date and end date are in the right format\n",
    "        s_date = dt.datetime.strptime(start,\"%y-%m-%d\")\n",
    "        e_date = dt.datetime.strptime(end,\"%y-%m-%d\")\n",
    "        \n",
    "        #find matching dates from the previous year\n",
    "        p_s_date = s_date-dt.timedelta(365)\n",
    "        p_e_date = e_date-dt.timedelta(365)\n",
    "        \n",
    "        #query measurements to see what the weather was like the previous year\n",
    "        print(\"Searching for weather data from \" + str(p_s_date) + \" to \" + str(p_e_date))\n",
    "        \n",
    "        weather_data = session.query(Measurement.date,func.avg(Measurement.tobs)).filter(Measurement.date>=p_s_date,Measurement.date<=p_e_date).group_by(Measurement.date).all()\n",
    "        \n",
    "        df_weather = pd.DataFrame(data=weather_data,columns=[\"date\",\"temp\"])\n",
    "        min_temp = df_weather[\"temp\"].min()\n",
    "        max_temp = df_weather[\"temp\"].max()\n",
    "        mean_temp = df_weather[\"temp\"].mean()\n",
    "        \n",
    "        print(\"min_temp, mean_temp, and max_temp are returned\")\n",
    "        return jsonify({'TMIN':min_temp}, {'TAVG':mean_temp}, {'TMAX':max_temp})\n",
    "        \n",
    "    except:\n",
    "        print(\"input dates are not in correct format. Dates should be formated as %y-%d-%y\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 228,
   "metadata": {},
   "outputs": [],
   "source": [
    "if __name__ == \"__main__\":\n",
    "    app.run"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 234,
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "EOL while scanning string literal (<ipython-input-234-c3650327ae4c>, line 11)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-234-c3650327ae4c>\"\u001b[0;36m, line \u001b[0;32m11\u001b[0m\n\u001b[0;31m    f\"Available Routes:<br/>\u001b[0m\n\u001b[0m                            ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m EOL while scanning string literal\n"
     ]
    }
   ],
   "source": [
    "# Create our session (link) from Python to the DB\n",
    "session = Session(engine)\n",
    "# Flask Setup\n",
    "app = Flask(__name__)\n",
    "\n",
    "# Flask Routes\n",
    "@app.route(\"/\")\n",
    "def welcome():\n",
    "    print(\"Server received a new request\")\n",
    "    return (\n",
    "            f\"Available Routes:<br/>\n",
    "            \"/api/v1.0/precipitation\n",
    "            \"/api/v1.0/stations\n",
    "            \"/api/v1.0/tobs\n",
    "            \"/api/v1.0/<start>` and `/api/v1.0/<start>/<end>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "@app.route(\"/api/v1.0/names\")\n",
    "def names():\n",
    "    \"\"\"Return a list of all passenger names\"\"\"\n",
    "    # Query all passengers\n",
    "    results = session.query(Passenger.name).all()\n",
    "\n",
    "    # Convert list of tuples into normal list\n",
    "    all_names = list(np.ravel(results))\n",
    "\n",
    "    return jsonify(all_names)\n",
    "\n",
    "\n",
    "@app.route(\"/api/v1.0/passengers\")\n",
    "def passengers():\n",
    "    \"\"\"Return a list of passenger data including the name, age, and sex of each passenger\"\"\"\n",
    "    # Query all passengers\n",
    "    results = session.query(Passenger).all()\n",
    "\n",
    "    # Create a dictionary from the row data and append to a list of all_passengers\n",
    "    all_passengers = []\n",
    "    for passenger in results:\n",
    "        passenger_dict = {}\n",
    "        passenger_dict[\"name\"] = passenger.name\n",
    "        passenger_dict[\"age\"] = passenger.age\n",
    "        passenger_dict[\"sex\"] = passenger.sex\n",
    "        all_passengers.append(passenger_dict)\n",
    "\n",
    "    return jsonify(all_passengers)\n",
    "\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    app.run(debug=True)\n",
    "    \n",
    "    "
   ]
  }
 ],
 "metadata": {
  "kernel_info": {
   "name": "python3"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  },
  "nteract": {
   "version": "0.9.1"
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
